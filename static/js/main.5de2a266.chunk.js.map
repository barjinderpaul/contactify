{"version":3,"sources":["component/Navbar.js","component/ContactButton.js","component/AddContact.js","component/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","handleItemClick","e","name","setState","activeItem","Container","textAlign","className","Input","size","icon","placeholder","onChange","this","props","updateQuery","value","query","to","Button","circular","color","Component","ContactButton","animated","negative","onClick","deleteContact","Content","visible","hidden","Icon","loading","AddContact","state","alertType","onAddContact","preventDefault","formData","serializeForm","target","hash","console","log","mobileNumber","undefined","isNaN","addContact","reset","text","primary","Message","onSubmit","content","React","Contact","contacts","createdAt","searchQuery","filter","contact","event","newContact","Date","toLocaleString","timeZone","split","concat","bind","src","exact","path","render","Card","Group","itemsPerRow","map","key","image","header","meta","description","extra","toLowerCase","includes","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5de2a266.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Input, Container, Button } from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nexport default class Navbar extends Component {\n  \n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n  render() {\n    return (\n        <Container textAlign='center' className = 'search-container' className='navbar'>\n          <Input size='massive' icon='search' placeholder='Search...' onChange = {this.props.updateQuery} value = {this.props.query} /> {' '}\n          <Link to=\"/contactify/create\">\n            <Button size = 'massive' circular icon = 'add user' color ='green'/>\n          </Link>\n        </Container>\n\n    )\n  }\n}\n","import React from 'react';\nimport {Button, Icon} from 'semantic-ui-react'\n\nconst ContactButton = (props) => {\n    return (\n        <Button animated='vertical' negative onClick = {props.deleteContact}>\n            <Button.Content visible>Delete Contact</Button.Content>\n            <Button.Content hidden>\n            <Icon loading name='delete' />\n            </Button.Content>\n        </Button>\n    );\n}\n\n\nexport default ContactButton;","import React from 'react';\nimport { Input, Button, Container, Message } from 'semantic-ui-react';\nimport serializeForm from 'form-serialize';\nimport { Link } from 'react-router-dom'; \n\nclass AddContact extends React.Component{\n\n    state = {\n        alertType: 0 //none\n    }\n\n    onAddContact = (e) => {\n        e.preventDefault();\n\n        const formData = serializeForm(e.target,{hash:true});\n        console.log(`name : ${formData.name} , mobileNumber : ${formData.mobileNumber}`)\n        if (formData.name === '' ||formData.name === undefined  || formData.mobileNumber === '' || formData.mobileNumber === undefined\n            || isNaN(formData.mobileNumber)) {\n            this.setState({\n                alertType:2 //error\n            });\n            return;\n        }\n\n        this.props.addContact(formData);\n        this.setState({\n            alertType:1 //success\n        })\n\n        e.target.reset();\n\n    }\n    render () {\n        return (\n            <>\n                <Container textAlign = 'center' text className = 'add-contact-container'>\n                    <Container textAlign=\"left\" >\n                        <Link to = \"/\">\n                            <Button icon=\"long arrow alternate left\" circular primary size='massive'/>\n                        </Link>\n                    </Container>\n                    \n                    { this.state.alertType === 1 \n                        ? <Message color='green' size ='large' >Contact added successfully</Message>\n                        :   this.state.alertType === 2 \n                            ?  <Message color='red' size='large'>Please enter valid details</Message> \n                            : ''\n                    }  \n\n                    <h2>Enter details</h2>\n                    <form onSubmit = {this.onAddContact}> \n                        <Input className = \"add-contact-container-input\" name = \"name\" placeholder = \"Name\" size='massive'/> <br />\n                        <Input className = \"add-contact-container-input\" name=\"mobileNumber\" placeholder = \"Mobile Number\" size='massive' /> <br />\n                        <Button content = \"Add contact\" size = 'massive' icon = 'plus circle' color=\"green\"/>\n                    </form>\n                </Container>\n            </>\n        );\n    }   \n}\n\nexport default AddContact;","import React from 'react';\nimport {Card} from 'semantic-ui-react'\nimport Navbar from './Navbar';\nimport ContactButton from './ContactButton';\nimport AddContact from './AddContact';\nimport {Route} from 'react-router-dom';\n\n\nclass Contact extends React.Component {\n\n    state = {\n        contacts : [\n            {\n                name : \"Gonzalvis Han\",\n                createdAt : '28/3/2020',\n                mobileNumber : '+91-1234567890'\n            },\n        \n            {\n                name : \"Kate cena\",\n                createdAt : '28/3/2020',\n                mobileNumber : '+91-1234567890'\n            },\n        \n            {\n                name : \"Sin Gabriel\",\n                createdAt : '28/3/2020',\n                mobileNumber : '+91-1234567890'\n            },\n        \n            {\n                name : \"John Doe\",\n                createdAt : '28/3/2020',\n                mobileNumber : '+91-1234567890'\n            }      \n        ],\n        searchQuery : \"\"\n    }\n\n    deleteContact = (name) => {\n        this.setState({\n            contacts: this.state.contacts.filter(contact => contact.name !== name)\n        });\n    }\n\n    updateQuery = (event) => {\n        console.log(`query : ${event.target.value}`)\n        this.setState({\n            searchQuery: event.target.value\n        })\n    }\n\n    addContact = ({name, mobileNumber}) => {\n        \n        let newContact = {\n            name,\n            createdAt: new Date().toLocaleString(\"en-IN\", {timeZone: \"Asia/Kolkata\"}).split(',')[0],\n            mobileNumber\n        };\n\n        this.setState({\n            contacts: this.state.contacts.concat(newContact)\n        });\n    }\n\n    updateQuery = this.updateQuery.bind(this);\n\n    render() {\n        const src = \"https://api.adorable.io/avatars/200/abott@adorable.png/\";\n        return (\n            <>\n                <Route exact\n                    path=\"/contactify/\"\n                    render = { ()=> (\n                        <>\n                        <Navbar updateQuery = {this.updateQuery} query = {this.state.searchQuery}/>\n                        <Card.Group className = \"container-custom\" itemsPerRow={4}>\n                        { this.state.searchQuery === '' ?\n                                this.state.contacts.map(contact => (\n                                    <Card \n                                        key = {contact.name}\n                                        image = {src}\n                                        header = {contact.name}\n                                        meta = {contact.createdAt}\n                                        description = {contact.mobileNumber}\n                                        extra = {<ContactButton deleteContact = {() => this.deleteContact(contact.name) } />}\n                                    />\n                                ))\n                                : \n                                    this.state.contacts.filter(contact => contact.name.toLowerCase().includes(this.state.searchQuery.toLowerCase()))\n                                    .map(contact => (\n                                        <Card \n                                        key = {contact.name}\n                                        image = {src}\n                                        header = {contact.name}\n                                        meta = {contact.createdAt}\n                                        description = {contact.mobileNumber}\n                                        extra = {<ContactButton deleteContact = {() => this.deleteContact(contact.name) } />}\n                                    />\n                                    ))\n                            }\n                        </Card.Group>\n                        </>\n                    )} \n                /> \n                <Route \n                    path=\"/contactify/create\" \n                    render = { () => ( <AddContact addContact = {(name, mobileNumber) => this.addContact(name,mobileNumber)}/> )} \n                />\n            </>\n        );\n    }   \n}\n\nexport default Contact;","import React from 'react';\nimport './App.css';\nimport Contact from './component/Contact'\nimport { BrowserRouter } from 'react-router-dom';\n\nfunction App() {\n  return (\n\n    <BrowserRouter>\n      <Contact />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}